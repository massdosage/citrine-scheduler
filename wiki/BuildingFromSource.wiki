#summary How to build Citrine from source.

= Building Citrine From Source =

This page describes the steps needed to get Citrine set up for development and covers checking out the code and building it from source. Once you get Citrine to build successfully the next step is to get onto the UnitTestSetup.

==Checkout the latest code from Subversion==
If you want to modify the source code based on the current trunk version you should follow the instructions on the [http://code.google.com/p/citrine-scheduler/source/checkout source] page. If you do not have Subversion commit rights you can still check out the code and create and submit a patch with your changes.

==Building from source==
Citrine uses [http://ant.apache.org/ivy Ivy] to manage the 3rd party libraries it uses. By default the Citrine build will retrieve all required 3rd party libraries from [http://code.google.com/p/ivyroundup/ Ivy Roundup]. Certain libraries cannot be automatically downloaded so they must be downloaded manually. Follow the instructions [http://code.google.com/p/ivyroundup/wiki/ManuallyDownloadedSoftware here] to download *javamail 1.4.3* and *jta 1.1*. You can download other versions of these packages but will need to change ivy.xml to reflect these different version numbers. 

You should then be able to run
{{{
ant build-war
}}}
to compile all the classes and build the Citrine.war file ready for deployment.

==Customising the build==

===Modifying build properties===
Various aspects of the build can be configured. To do this copy the file in the project root folder
{{{
build.properties.example
}}}
to 
{{{
build.properties
}}}
This file is commented and explains the various properties that are commonly changed.

===Skipping retrieval of Ivy artifacts===
If you are doing many build operations and you know the 3rd party libraries aren't changing you can speed up the build by skipping the Ivy retrieval like so:
{{{
ant -Divy.skip.retrieve=true -Divy.initialised=true build-war
}}}